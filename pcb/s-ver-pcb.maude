load s-modules.cbabel
load pc-default.cbabel
*** load pc-mutex.cbabel
*** load pc-guards-mutex.cbabel
*** load pc-mutex-guards.cbabel

(omod PCB-EXEC is
 inc PC-DEFAULT .

 var C : Configuration .
 var O : Oid .
 vars IT IT' : Interaction .
 vars M N : Int .

 rl [producer-do] : done(O, producer@put, IT) => do(O, producer@put, none) .
 rl [consumer-do] : done(O, consumer@get, IT) => do(O, consumer@get, none) .

 rl [buffer-do-put] :
    do(O, buffer@put, IT) 
    < O : BUFFER | items : N , maxitems : M > => 
    < O : BUFFER | items : (if (N + 1) > (M + 1) then (M + 1) else (N + 1) fi) , 
                   maxitems : M > 
    done(O, buffer@put, IT)  .

 rl [buffer-do-get] : 
    do(O, buffer@get, IT) < O : BUFFER | items : N > => 
    < O : BUFFER | items : (if (N - 1) < -1 then -1 else (N - 1) fi) > 
    done(O, buffer@get, IT) .

 op initial : -> Configuration .
 eq initial = topology 
              do(cons1, consumer@get, none) do(prod1, producer@put, none)
              do(cons2, consumer@get, none) do(prod2, producer@put, none) .
endom)

(omod PCB-VER is 
 inc PCB-EXEC .
 pr MODEL-CHECKER .

 subsort Configuration < State .

 var C : Configuration .
 vars O O' : Oid .
 vars IT IT' : Interaction .
 vars M N : Int .
 var P  : PortId .

 ops putting getting : -> Prop .
 eq < O : BUFFER | > send(O, buffer@put, IT) C |= putting = true .
 eq < O : BUFFER | > send(O, buffer@get, IT) C |= getting = true .

 op raceCondFree : -> Formula .
 eq raceCondFree = [] ~ (putting /\ getting) .

 op deadlockFree : -> Formula . 
 eq deadlockFree = []<> (putting \/ getting) .

 ops overflow underflow : -> Prop .
 ceq < O : BUFFER | items : N, maxitems : M >
     C |= overflow = true if N > M .

 ceq < O : BUFFER | items : N > 
     C |= underflow = true if N < 0 .
endom)

eof

(omod PCB-EXEC-ABS is 
  ex PCB-EXEC .

  var O : Oid .
  var I : Interaction .

  eq ack([O, producer@put] :: I) = 
     send(gput, gp@in, [O, producer@put]) .

  eq ack([O, consumer@get] :: I) =
     send(gget, gg@in, [O, consumer@get]) .

  eq send(buff, P:PortId, I) = ack(I) .
endom)

