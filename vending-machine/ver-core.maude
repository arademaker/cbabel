mod VM-EXEC is
  sorts ADD-DOLLAR ADD-QUARTER Attribute AttributeSet BUY-APPLE BUY-CAKE Bool
    CHANGE COUNT-DOLLAR COUNT-QUARTER Cid Configuration Int Interaction
    MAKE-CHANGE Msg Nat NzInt NzNat Object Oid PortId PortInId PortOutId
    PortStatus SLOT SOLD-APPLE SOLD-CAKE StateRequired Status Zero .
  subsort ADD-DOLLAR < Cid .
  subsort ADD-QUARTER < Cid .
  subsort Attribute < AttributeSet .
  subsort BUY-APPLE < Cid .
  subsort BUY-CAKE < Cid .
  subsort CHANGE < Cid .
  subsort COUNT-DOLLAR < Cid .
  subsort COUNT-QUARTER < Cid .
  subsort MAKE-CHANGE < Cid .
  subsort Msg < Configuration .
  subsort Nat < Int .
  subsort NzInt < Int .
  subsort NzNat < Nat .
  subsort NzNat < NzInt .
  subsort Object < Configuration .
  subsort PortInId < PortId .
  subsort PortOutId < PortId .
  subsort SLOT < Cid .
  subsort SOLD-APPLE < Cid .
  subsort SOLD-CAKE < Cid .
  subsort Zero < Nat .
  op <_:_|`> : Oid Cid -> Object .
  op ADD-DOLLAR : -> ADD-DOLLAR .
  op ADD-QUARTER : -> ADD-QUARTER .
  op BUY-APPLE : -> BUY-APPLE .
  op BUY-CAKE : -> BUY-CAKE .
  op CHANGE : -> CHANGE .
  op COUNT-DOLLAR : -> COUNT-DOLLAR .
  op COUNT-QUARTER : -> COUNT-QUARTER .
  op MAKE-CHANGE : -> MAKE-CHANGE .
  op SLOT : -> SLOT .
  op SOLD-APPLE : -> SOLD-APPLE .
  op SOLD-CAKE : -> SOLD-CAKE .
  op `[_`,_`] : Oid PortOutId -> Interaction .
  op ack : Interaction -> Msg .
  op after : Object -> Object .
  op before : Object -> Object .
  op bt-ad : -> Oid .
  op bt-aq : -> Oid .
  op bt-ba : -> Oid .
  op bt-bc : -> Oid .
  op bt-change : -> Oid .
  op class : Object -> Cid .
  op con-cd : -> Oid .
  op con-change : -> Oid .
  op con-cq : -> Oid .
  op con-sa : -> Oid .
  op con-sc : -> Oid .
  op copy : Msg Nat -> Configuration .
  op do : Oid PortId Interaction -> Msg .
  op done : Oid PortId Interaction -> Msg .
  op get-apples : Object -> Int .
  op get-cakes : Object -> Int .
  op get-ch@dollars : Object -> Int .
  op get-ch@quarters : Object -> Int .
  op get-dollars : Object -> Int .
  op get-quarters : Object -> Int .
  op get-sa@dollars : Object -> Int .
  op get-sa@quarters : Object -> Int .
  op get-sc@dollars : Object -> Int .
  op initial : -> Configuration .
  op instantiate : Oid Cid -> Object .
  op none : -> AttributeSet .
  op none : -> Configuration .
  op none : -> Interaction .
  op open? : Object -> Bool .
  op send : Oid PortId Interaction -> Msg .
  op set-apples : Object Int -> Object .
  op set-cakes : Object Int -> Object .
  op set-ch@dollars : Object Int -> Object .
  op set-ch@quarters : Object Int -> Object .
  op set-dollars : Object Int -> Object .
  op set-quarters : Object Int -> Object .
  op set-sa@dollars : Object Int -> Object .
  op set-sa@quarters : Object Int -> Object .
  op set-sc@dollars : Object Int -> Object .
  op slot : -> Oid .
  op topology : -> Configuration .
  op -_ : Int -> Int
    [special(id-hook MinusSymbol op-hook succSymbol(s_ : Nat ~> NzNat)op-hook
    minusSymbol(-_ : NzNat ~> NzInt))] .
  op -_ : NzInt -> NzInt
    [special(id-hook MinusSymbol op-hook succSymbol(s_ : Nat ~> NzNat)op-hook
    minusSymbol(-_ : NzNat ~> NzInt))] .
  op -_ : NzNat -> NzInt
    [ctor special(id-hook MinusSymbol op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op 0 : -> Zero
    [ctor] .
  op <_:_|_> : Oid Cid AttributeSet -> Object
    [ctor object] .
  op _&_ : Int Int -> Int
    [assoc comm prec 53 special(id-hook ACU_NumberOpSymbol(&)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _&_ : Nat Nat -> Nat
    [assoc comm prec 53 special(id-hook ACU_NumberOpSymbol(&)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _*_ : Int Int -> Int
    [assoc comm prec 31 special(id-hook ACU_NumberOpSymbol(*)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _*_ : Nat Nat -> Nat
    [assoc comm prec 31 special(id-hook ACU_NumberOpSymbol(*)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _*_ : NzInt NzInt -> NzInt
    [assoc comm prec 31 special(id-hook ACU_NumberOpSymbol(*)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _*_ : NzNat NzNat -> NzNat
    [assoc comm prec 31 special(id-hook ACU_NumberOpSymbol(*)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _+_ : Int Int -> Int
    [assoc comm prec 33 special(id-hook ACU_NumberOpSymbol(+)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _+_ : Nat Nat -> Nat
    [assoc comm prec 33 special(id-hook ACU_NumberOpSymbol(+)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _+_ : NzNat Nat -> NzNat
    [assoc comm prec 33 special(id-hook ACU_NumberOpSymbol(+)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _-_ : Int Int -> Int
    [prec 33 gather(E e)special(id-hook NumberOpSymbol(-)op-hook succSymbol(s_
    : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _::_ : Interaction Interaction -> Interaction
    [assoc id:(none).Interaction prec 13 gather(e E)] .
  op _<<_ : Int Nat -> Int
    [prec 35 gather(E e)special(id-hook NumberOpSymbol(<<)op-hook succSymbol(s_
    : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _<<_ : Nat Nat -> Nat
    [prec 35 gather(E e)special(id-hook NumberOpSymbol(<<)op-hook succSymbol(s_
    : Nat ~> NzNat))] .
  op _<=_ : Int Int -> Bool
    [prec 37 special(id-hook NumberOpSymbol(<=)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt)term-hook trueTerm(
    true)term-hook falseTerm(false))] .
  op _<=_ : Nat Nat -> Bool
    [prec 37 special(id-hook NumberOpSymbol(<=)op-hook succSymbol(s_ : Nat ~>
    NzNat)term-hook trueTerm(true)term-hook falseTerm(false))] .
  op _<_ : Int Int -> Bool
    [prec 37 special(id-hook NumberOpSymbol(<)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt)term-hook trueTerm(
    true)term-hook falseTerm(false))] .
  op _<_ : Nat Nat -> Bool
    [prec 37 special(id-hook NumberOpSymbol(<)op-hook succSymbol(s_ : Nat ~>
    NzNat)term-hook trueTerm(true)term-hook falseTerm(false))] .
  op _=/=_ : Universal Universal -> Bool
    [poly(1 2)prec 51 special(id-hook EqualitySymbol term-hook equalTerm(
    false)term-hook notEqualTerm(true))] .
  op _==_ : Universal Universal -> Bool
    [poly(1 2)prec 51 special(id-hook EqualitySymbol term-hook equalTerm(
    true)term-hook notEqualTerm(false))] .
  op _>=_ : Int Int -> Bool
    [prec 37 special(id-hook NumberOpSymbol(>=)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt)term-hook trueTerm(
    true)term-hook falseTerm(false))] .
  op _>=_ : Nat Nat -> Bool
    [prec 37 special(id-hook NumberOpSymbol(>=)op-hook succSymbol(s_ : Nat ~>
    NzNat)term-hook trueTerm(true)term-hook falseTerm(false))] .
  op _>>_ : Int Nat -> Int
    [prec 35 gather(E e)special(id-hook NumberOpSymbol(>>)op-hook succSymbol(s_
    : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _>>_ : Nat Nat -> Nat
    [prec 35 gather(E e)special(id-hook NumberOpSymbol(>>)op-hook succSymbol(s_
    : Nat ~> NzNat))] .
  op _>_ : Int Int -> Bool
    [prec 37 special(id-hook NumberOpSymbol(>)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt)term-hook trueTerm(
    true)term-hook falseTerm(false))] .
  op _>_ : Nat Nat -> Bool
    [prec 37 special(id-hook NumberOpSymbol(>)op-hook succSymbol(s_ : Nat ~>
    NzNat)term-hook trueTerm(true)term-hook falseTerm(false))] .
  op _^_ : Int Nat -> Int
    [prec 29 gather(E e)special(id-hook NumberOpSymbol(^)op-hook succSymbol(s_
    : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _^_ : Nat Nat -> Nat
    [prec 29 gather(E e)special(id-hook NumberOpSymbol(^)op-hook succSymbol(s_
    : Nat ~> NzNat))] .
  op _^_ : NzInt Nat -> NzInt
    [prec 29 gather(E e)special(id-hook NumberOpSymbol(^)op-hook succSymbol(s_
    : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _^_ : NzNat Nat -> NzNat
    [prec 29 gather(E e)special(id-hook NumberOpSymbol(^)op-hook succSymbol(s_
    : Nat ~> NzNat))] .
  op __ : Configuration Configuration -> Configuration
    [assoc comm id:(none).Configuration format(o n o)ctor config] .
  op _`,_ : AttributeSet AttributeSet -> AttributeSet
    [assoc comm id:(none).AttributeSet ctor] .
  op _and_ : Bool Bool -> Bool
    [assoc comm prec 55] .
  op _divides_ : NzInt Int -> Bool
    [prec 51 special(id-hook NumberOpSymbol(divides)op-hook succSymbol(s_ : Nat
    ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt)term-hook trueTerm(
    true)term-hook falseTerm(false))] .
  op _divides_ : NzNat Nat -> Bool
    [prec 51 special(id-hook NumberOpSymbol(divides)op-hook succSymbol(s_ : Nat
    ~> NzNat)term-hook trueTerm(true)term-hook falseTerm(false))] .
  op _implies_ : Bool Bool -> Bool
    [prec 61 gather(e E)] .
  op _or_ : Bool Bool -> Bool
    [assoc comm prec 59] .
  op _quo_ : Int NzInt -> Int
    [prec 31 gather(E e)special(id-hook NumberOpSymbol(quo)op-hook succSymbol(
    s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _quo_ : Nat NzNat -> Nat
    [prec 31 gather(E e)special(id-hook NumberOpSymbol(quo)op-hook succSymbol(
    s_ : Nat ~> NzNat))] .
  op _rem_ : Int NzInt -> Int
    [prec 31 gather(E e)special(id-hook NumberOpSymbol(rem)op-hook succSymbol(
    s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _rem_ : Nat NzNat -> Nat
    [prec 31 gather(E e)special(id-hook NumberOpSymbol(rem)op-hook succSymbol(
    s_ : Nat ~> NzNat))] .
  op _xor_ : Bool Bool -> Bool
    [assoc comm prec 57] .
  op _xor_ : Int Int -> Int
    [assoc comm prec 55 special(id-hook ACU_NumberOpSymbol(xor)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _xor_ : Nat Nat -> Nat
    [assoc comm prec 55 special(id-hook ACU_NumberOpSymbol(xor)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _|_ : Int Int -> Int
    [assoc comm prec 57 special(id-hook ACU_NumberOpSymbol(|)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _|_ : Nat Nat -> Nat
    [assoc comm prec 57 special(id-hook ACU_NumberOpSymbol(|)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op _|_ : NzInt Int -> NzInt
    [assoc comm prec 57 special(id-hook ACU_NumberOpSymbol(|)op-hook
    succSymbol(s_ : Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op _|_ : NzNat Nat -> NzNat
    [assoc comm prec 57 special(id-hook ACU_NumberOpSymbol(|)op-hook
    succSymbol(s_ : Nat ~> NzNat))] .
  op abs : Int -> Nat
    [special(id-hook NumberOpSymbol(abs)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op abs : NzInt -> NzNat
    [special(id-hook NumberOpSymbol(abs)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op ack-apple : -> PortInId
    [ctor] .
  op ack-cake : -> PortInId
    [ctor] .
  op add-$ : -> PortOutId
    [ctor] .
  op add-q : -> PortOutId
    [ctor] .
  op apples`:_ : Int -> Attribute
    [gather(&)] .
  op buy-apple : -> PortOutId
    [ctor] .
  op buy-cake : -> PortOutId
    [ctor] .
  op cakes`:_ : Int -> Attribute
    [gather(&)] .
  op ch@dollars`:_ : StateRequired -> Attribute
    [gather(&)] .
  op ch@quarters`:_ : StateRequired -> Attribute
    [gather(&)] .
  op change : -> PortOutId
    [ctor] .
  op change-in : -> PortInId
    [ctor] .
  op changed : -> Status
    [ctor] .
  op dollars`:_ : Int -> Attribute
    [gather(&)] .
  op false : -> Bool
    [ctor special(id-hook SystemFalse)] .
  op gcd : Int Int -> Nat
    [assoc comm special(id-hook ACU_NumberOpSymbol(gcd)op-hook succSymbol(s_ :
    Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op gcd : Nat Nat -> Nat
    [assoc comm special(id-hook ACU_NumberOpSymbol(gcd)op-hook succSymbol(s_ :
    Nat ~> NzNat))] .
  op gcd : NzInt Int -> NzNat
    [assoc comm special(id-hook ACU_NumberOpSymbol(gcd)op-hook succSymbol(s_ :
    Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op gcd : NzNat Nat -> NzNat
    [assoc comm special(id-hook ACU_NumberOpSymbol(gcd)op-hook succSymbol(s_ :
    Nat ~> NzNat))] .
  op give-apple : -> PortOutId
    [ctor] .
  op give-cake : -> PortOutId
    [ctor] .
  op ground : -> PortOutId
    [ctor] .
  op if_then_else_fi : Bool Universal Universal -> Universal
    [poly(2 3 0)special(id-hook BranchSymbol term-hook 1(true)term-hook 2(
    false))] .
  op inc-$ : -> PortInId
    [ctor] .
  op inc-q : -> PortInId
    [ctor] .
  op iset : Interaction Interaction -> Interaction
    [assoc id:(none).Interaction] .
  op lcm : Int Int -> Nat
    [assoc comm special(id-hook ACU_NumberOpSymbol(lcm)op-hook succSymbol(s_ :
    Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op lcm : Nat Nat -> Nat
    [assoc comm special(id-hook ACU_NumberOpSymbol(lcm)op-hook succSymbol(s_ :
    Nat ~> NzNat))] .
  op lcm : NzInt NzInt -> NzNat
    [assoc comm special(id-hook ACU_NumberOpSymbol(lcm)op-hook succSymbol(s_ :
    Nat ~> NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  op lcm : NzNat NzNat -> NzNat
    [assoc comm special(id-hook ACU_NumberOpSymbol(lcm)op-hook succSymbol(s_ :
    Nat ~> NzNat))] .
  op locked : -> PortStatus
    [ctor] .
  op modExp :[Nat][Nat][Nat]->[Nat]
    [special(id-hook NumberOpSymbol(modExp)op-hook succSymbol(s_ : Nat ~>
    NzNat))] .
  op not_ : Bool -> Bool
    [prec 53] .
  op put-apple : -> PortInId
    [ctor] .
  op put-cake : -> PortInId
    [ctor] .
  op quarters`:_ : Int -> Attribute
    [gather(&)] .
  op s_ : Nat -> NzNat
    [ctor iter special(id-hook SuccSymbol term-hook zeroTerm(0))] .
  op sa@dollars`:_ : StateRequired -> Attribute
    [gather(&)] .
  op sa@quarters`:_ : StateRequired -> Attribute
    [gather(&)] .
  op sc@dollars`:_ : StateRequired -> Attribute
    [gather(&)] .
  op sd : Nat Nat -> Nat
    [comm special(id-hook CUI_NumberOpSymbol(sd)op-hook succSymbol(s_ : Nat ~>
    NzNat))] .
  op st : Bool Status -> StateRequired
    [ctor] .
  op st : Int Status -> StateRequired
    [ctor] .
  op true : -> Bool
    [ctor special(id-hook SystemTrue)] .
  op unchanged : -> Status
    [ctor] .
  op unlocked : -> PortStatus
    [ctor] .
  op ~_ : Int -> Int
    [special(id-hook NumberOpSymbol(~)op-hook succSymbol(s_ : Nat ~>
    NzNat)op-hook minusSymbol(-_ : NzNat ~> NzInt))] .
  eq initial
    = topology
do(bt-ad,add-$,none)
copy(do(bt-aq,add-q,none),4)
do(bt-change,change,none)
do(bt-ba,buy-apple,none) .
  eq topology
    = instantiate(bt-ad,ADD-DOLLAR)
instantiate(bt-aq,ADD-QUARTER)
instantiate(bt-ba,BUY-APPLE)
instantiate(bt-bc,BUY-CAKE)
instantiate(bt-change,CHANGE)
instantiate(con-cd,COUNT-DOLLAR)
instantiate(con-change,MAKE-CHANGE)
instantiate(con-cq,COUNT-QUARTER)
instantiate(con-sa,SOLD-APPLE)
instantiate(con-sc,SOLD-CAKE)
instantiate(slot,SLOT)
none .
  eq < O:Oid : C:Cid | >
    = < O:Oid : C:Cid | none > .
  eq < con-change : V#0:MAKE-CHANGE | ch@quarters : V#1:StateRequired,
    ch@dollars : st(V1:Int,changed),none,V#2:AttributeSet >
< con-cd : V#3:COUNT-DOLLAR | dollars : V2:Int,none,V#4:AttributeSet >
    = < con-change : V#0:MAKE-CHANGE | ch@dollars : st(V1:Int,unchanged),
    ch@quarters : V#1:StateRequired,V#2:AttributeSet >
< con-cd : V#3:COUNT-DOLLAR | dollars : V1:Int,V#4:AttributeSet > .
  eq < con-change : V#5:MAKE-CHANGE | ch@dollars : V#6:StateRequired,
    ch@quarters : st(V1:Int,changed),none,V#7:AttributeSet >
< con-cq : V#8:COUNT-QUARTER | quarters : V2:Int,none,V#9:AttributeSet >
    = < con-change : V#5:MAKE-CHANGE | ch@quarters : st(V1:Int,unchanged),
    ch@dollars : V#6:StateRequired,V#7:AttributeSet >
< con-cq : V#8:COUNT-QUARTER | quarters : V1:Int,V#9:AttributeSet > .
  eq < con-sa : V#10:SOLD-APPLE | sa@quarters : V#11:StateRequired,sa@dollars :
    st(V1:Int,changed),none,V#12:AttributeSet >
< con-cd : V#13:COUNT-DOLLAR | dollars : V2:Int,none,V#14:AttributeSet >
    = < con-sa : V#10:SOLD-APPLE | sa@dollars : st(V1:Int,unchanged),
    sa@quarters : V#11:StateRequired,V#12:AttributeSet >
< con-cd : V#13:COUNT-DOLLAR | dollars : V1:Int,V#14:AttributeSet > .
  eq < con-sa : V#15:SOLD-APPLE | sa@dollars : V#16:StateRequired,sa@quarters :
    st(V1:Int,changed),none,V#17:AttributeSet >
< con-cq : V#18:COUNT-QUARTER | quarters : V2:Int,none,V#19:AttributeSet >
    = < con-sa : V#15:SOLD-APPLE | sa@quarters : st(V1:Int,unchanged),
    sa@dollars : V#16:StateRequired,V#17:AttributeSet >
< con-cq : V#18:COUNT-QUARTER | quarters : V1:Int,V#19:AttributeSet > .
  eq < con-sc : V#20:SOLD-CAKE | sc@dollars : st(V1:Int,changed),none,
    V#21:AttributeSet >
< con-cd : V#22:COUNT-DOLLAR | dollars : V2:Int,none,V#23:AttributeSet >
    = < con-sc : V#20:SOLD-CAKE | sc@dollars : st(V1:Int,unchanged),
    V#21:AttributeSet >
< con-cd : V#22:COUNT-DOLLAR | dollars : V1:Int,V#23:AttributeSet > .
  eq A:Bool and A:Bool
    = A:Bool .
  eq A:Bool and(B:Bool xor C:Bool)
    = A:Bool and B:Bool xor A:Bool and C:Bool .
  eq false and A:Bool
    = false .
  eq true and A:Bool
    = A:Bool .
  eq A:Bool implies B:Bool
    = not(A:Bool xor A:Bool and B:Bool) .
  eq A:Bool or B:Bool
    = A:Bool and B:Bool xor A:Bool xor B:Bool .
  eq A:Bool xor A:Bool
    = false .
  eq false xor A:Bool
    = A:Bool .
  eq ack(none)
    = (none).Configuration .
  eq class(< O:Oid : C:Cid | A:AttributeSet >)
    = C:Cid .
  eq copy(MSG:Msg,0)
    = (none).Configuration .
  eq copy(MSG:Msg,N:Int)
    = MSG:Msg
copy(MSG:Msg,N:Int - 1) .
  eq get-apples(< O:Oid : V#0:SLOT | cakes : V#1:Int,apples : V:Int,none,
    V#2:AttributeSet >)
    = V:Int .
  eq get-cakes(< O:Oid : V#3:SLOT | apples : V#4:Int,cakes : V:Int,none,
    V#5:AttributeSet >)
    = V:Int .
  eq get-ch@dollars(< O:Oid : V#0:MAKE-CHANGE | ch@quarters :
    V#1:StateRequired,ch@dollars : st(V:Int,S:Status),none,V#2:AttributeSet >)
    = V:Int .
  eq get-ch@quarters(< O:Oid : V#3:MAKE-CHANGE | ch@dollars :
    V#4:StateRequired,ch@quarters : st(V:Int,S:Status),none,V#5:AttributeSet >)
    = V:Int .
  eq get-dollars(< O:Oid : V#0:COUNT-DOLLAR | dollars : V:Int,none,
    V#1:AttributeSet >)
    = V:Int .
  eq get-quarters(< O:Oid : V#0:COUNT-QUARTER | quarters : V:Int,none,
    V#1:AttributeSet >)
    = V:Int .
  eq get-sa@dollars(< O:Oid : V#0:SOLD-APPLE | sa@quarters : V#1:StateRequired,
    sa@dollars : st(V:Int,S:Status),none,V#2:AttributeSet >)
    = V:Int .
  eq get-sa@quarters(< O:Oid : V#3:SOLD-APPLE | sa@dollars : V#4:StateRequired,
    sa@quarters : st(V:Int,S:Status),none,V#5:AttributeSet >)
    = V:Int .
  eq get-sc@dollars(< O:Oid : V#0:SOLD-CAKE | sc@dollars : st(V:Int,S:Status),
    none,V#1:AttributeSet >)
    = V:Int .
  eq instantiate(O:Oid,ADD-DOLLAR)
    = < O:Oid : ADD-DOLLAR | none > .
  eq instantiate(O:Oid,ADD-QUARTER)
    = < O:Oid : ADD-QUARTER | none > .
  eq instantiate(O:Oid,BUY-APPLE)
    = < O:Oid : BUY-APPLE | none > .
  eq instantiate(O:Oid,BUY-CAKE)
    = < O:Oid : BUY-CAKE | none > .
  eq instantiate(O:Oid,CHANGE)
    = < O:Oid : CHANGE | none > .
  eq instantiate(O:Oid,COUNT-DOLLAR)
    = < O:Oid : COUNT-DOLLAR | none,dollars : 0 > .
  eq instantiate(O:Oid,COUNT-QUARTER)
    = < O:Oid : COUNT-QUARTER | none,quarters : 0 > .
  eq instantiate(O:Oid,MAKE-CHANGE)
    = < O:Oid : MAKE-CHANGE |(none,ch@dollars : st(0,unchanged)),ch@quarters :
    st(0,unchanged)> .
  eq instantiate(O:Oid,SLOT)
    = < O:Oid : SLOT |(none,apples : 0),cakes : 0 > .
  eq instantiate(O:Oid,SOLD-APPLE)
    = < O:Oid : SOLD-APPLE |(none,sa@dollars : st(0,unchanged)),sa@quarters :
    st(0,unchanged)> .
  eq instantiate(O:Oid,SOLD-CAKE)
    = < O:Oid : SOLD-CAKE | none,sc@dollars : st(0,unchanged)> .
  eq not A:Bool
    = true xor A:Bool .
  eq send(O:Oid,ground,IT:Interaction)
    = (none).Configuration .
  eq set-apples(< O:Oid : V#6:SLOT | cakes : V#7:Int,apples : V:Int,none,
    V#8:AttributeSet >,V':Int)
    = < O:Oid : V#6:SLOT | apples : V':Int,cakes : V#7:Int,V#8:AttributeSet > .
  eq set-cakes(< O:Oid : V#9:SLOT | apples : V#10:Int,cakes : V:Int,none,
    V#11:AttributeSet >,V':Int)
    = < O:Oid : V#9:SLOT | cakes : V':Int,apples : V#10:Int,V#11:AttributeSet >
    .
  eq set-ch@dollars(< O:Oid : V#6:MAKE-CHANGE | ch@quarters :
    V#7:StateRequired,ch@dollars : st(V:Int,S:Status),none,V#8:AttributeSet >,
    V':Int)
    = < O:Oid : V#6:MAKE-CHANGE | ch@dollars : st(V':Int,changed),ch@quarters :
    V#7:StateRequired,V#8:AttributeSet > .
  eq set-ch@quarters(< O:Oid : V#9:MAKE-CHANGE | ch@dollars :
    V#10:StateRequired,ch@quarters : st(V:Int,S:Status),none,V#11:AttributeSet
    >,V':Int)
    = < O:Oid : V#9:MAKE-CHANGE | ch@quarters : st(V':Int,changed),ch@dollars :
    V#10:StateRequired,V#11:AttributeSet > .
  eq set-dollars(< O:Oid : V#2:COUNT-DOLLAR | dollars : V:Int,none,
    V#3:AttributeSet >,V':Int)
    = < O:Oid : V#2:COUNT-DOLLAR | dollars : V':Int,V#3:AttributeSet > .
  eq set-quarters(< O:Oid : V#2:COUNT-QUARTER | quarters : V:Int,none,
    V#3:AttributeSet >,V':Int)
    = < O:Oid : V#2:COUNT-QUARTER | quarters : V':Int,V#3:AttributeSet > .
  eq set-sa@dollars(< O:Oid : V#6:SOLD-APPLE | sa@quarters : V#7:StateRequired,
    sa@dollars : st(V:Int,S:Status),none,V#8:AttributeSet >,V':Int)
    = < O:Oid : V#6:SOLD-APPLE | sa@dollars : st(V':Int,changed),sa@quarters :
    V#7:StateRequired,V#8:AttributeSet > .
  eq set-sa@quarters(< O:Oid : V#9:SOLD-APPLE | sa@dollars :
    V#10:StateRequired,sa@quarters : st(V:Int,S:Status),none,V#11:AttributeSet
    >,V':Int)
    = < O:Oid : V#9:SOLD-APPLE | sa@quarters : st(V':Int,changed),sa@dollars :
    V#10:StateRequired,V#11:AttributeSet > .
  eq set-sc@dollars(< O:Oid : V#2:SOLD-CAKE | sc@dollars : st(V:Int,S:Status),
    none,V#3:AttributeSet >,V':Int)
    = < O:Oid : V#2:SOLD-CAKE | sc@dollars : st(V':Int,changed),
    V#3:AttributeSet > .
  ceq < con-change : V#24:MAKE-CHANGE | ch@quarters : V#25:StateRequired,
    ch@dollars : st(V1:Int,unchanged),none,V#26:AttributeSet >
< con-cd : V#27:COUNT-DOLLAR | dollars : V2:Int,none,V#28:AttributeSet >
    = < con-change : V#24:MAKE-CHANGE | ch@dollars : st(V2:Int,unchanged),
    ch@quarters : V#25:StateRequired,V#26:AttributeSet >
< con-cd : V#27:COUNT-DOLLAR | dollars : V2:Int,V#28:AttributeSet >
    if V1:Int =/= V2:Int = true .
  ceq < con-change : V#29:MAKE-CHANGE | ch@dollars : V#30:StateRequired,
    ch@quarters : st(V1:Int,unchanged),none,V#31:AttributeSet >
< con-cq : V#32:COUNT-QUARTER | quarters : V2:Int,none,V#33:AttributeSet >
    = < con-change : V#29:MAKE-CHANGE | ch@quarters : st(V2:Int,unchanged),
    ch@dollars : V#30:StateRequired,V#31:AttributeSet >
< con-cq : V#32:COUNT-QUARTER | quarters : V2:Int,V#33:AttributeSet >
    if V1:Int =/= V2:Int = true .
  ceq < con-sa : V#34:SOLD-APPLE | sa@quarters : V#35:StateRequired,sa@dollars
    : st(V1:Int,unchanged),none,V#36:AttributeSet >
< con-cd : V#37:COUNT-DOLLAR | dollars : V2:Int,none,V#38:AttributeSet >
    = < con-sa : V#34:SOLD-APPLE | sa@dollars : st(V2:Int,unchanged),
    sa@quarters : V#35:StateRequired,V#36:AttributeSet >
< con-cd : V#37:COUNT-DOLLAR | dollars : V2:Int,V#38:AttributeSet >
    if V1:Int =/= V2:Int = true .
  ceq < con-sa : V#39:SOLD-APPLE | sa@dollars : V#40:StateRequired,sa@quarters
    : st(V1:Int,unchanged),none,V#41:AttributeSet >
< con-cq : V#42:COUNT-QUARTER | quarters : V2:Int,none,V#43:AttributeSet >
    = < con-sa : V#39:SOLD-APPLE | sa@quarters : st(V2:Int,unchanged),
    sa@dollars : V#40:StateRequired,V#41:AttributeSet >
< con-cq : V#42:COUNT-QUARTER | quarters : V2:Int,V#43:AttributeSet >
    if V1:Int =/= V2:Int = true .
  ceq < con-sc : V#44:SOLD-CAKE | sc@dollars : st(V1:Int,unchanged),none,
    V#45:AttributeSet >
< con-cd : V#46:COUNT-DOLLAR | dollars : V2:Int,none,V#47:AttributeSet >
    = < con-sc : V#44:SOLD-CAKE | sc@dollars : st(V2:Int,unchanged),
    V#45:AttributeSet >
< con-cd : V#46:COUNT-DOLLAR | dollars : V2:Int,V#47:AttributeSet >
    if V1:Int =/= V2:Int = true .
  ceq after(OBJ:Object)
    = OBJ:Object
    if class(OBJ:Object)= COUNT-DOLLAR .
  ceq after(OBJ:Object)
    = OBJ:Object
    if class(OBJ:Object)= COUNT-QUARTER .
  ceq after(OBJ:Object)
    = OBJ:Object
    if class(OBJ:Object)= MAKE-CHANGE .
  ceq after(OBJ:Object)
    = OBJ:Object
    if class(OBJ:Object)= SOLD-APPLE .
  ceq after(OBJ:Object)
    = OBJ:Object
    if class(OBJ:Object)= SOLD-CAKE .
  ceq before(OBJ:Object)
    = set-ch@quarters(set-ch@dollars(OBJ:Object,get-ch@dollars(OBJ:Object)+ 1),
    get-ch@quarters(set-ch@dollars(OBJ:Object,get-ch@dollars(OBJ:Object)+ 1))-
    4)
    if class(OBJ:Object)= MAKE-CHANGE .
  ceq before(OBJ:Object)
    = set-dollars(OBJ:Object,get-dollars(OBJ:Object)+ 1)
    if class(OBJ:Object)= COUNT-DOLLAR .
  ceq before(OBJ:Object)
    = set-quarters(OBJ:Object,get-quarters(OBJ:Object)+ 1)
    if class(OBJ:Object)= COUNT-QUARTER .
  ceq before(OBJ:Object)
    = set-sa@quarters(set-sa@dollars(OBJ:Object,get-sa@dollars(OBJ:Object)- 1),
    get-sa@quarters(set-sa@dollars(OBJ:Object,get-sa@dollars(OBJ:Object)- 1))+
    1)
    if class(OBJ:Object)= SOLD-APPLE .
  ceq before(OBJ:Object)
    = set-sc@dollars(OBJ:Object,get-sc@dollars(OBJ:Object)- 1)
    if class(OBJ:Object)= SOLD-CAKE .
  ceq open?(OBJ:Object)
    = true
    if class(OBJ:Object)= COUNT-DOLLAR .
  ceq open?(OBJ:Object)
    = true
    if class(OBJ:Object)= COUNT-QUARTER .
  ceq open?(OBJ:Object)
    = get-ch@quarters(OBJ:Object)> 3
    if class(OBJ:Object)= MAKE-CHANGE .
  ceq open?(OBJ:Object)
    = get-sa@dollars(OBJ:Object)> 0
    if class(OBJ:Object)= SOLD-APPLE .
  ceq open?(OBJ:Object)
    = get-sc@dollars(OBJ:Object)> 0
    if class(OBJ:Object)= SOLD-CAKE .
  eq send(bt-ad,add-$,IT:Interaction)
    = send(con-cd,inc-$,IT:Interaction) [label add-$-linking-inc-$] .
  eq send(bt-aq,add-q,IT:Interaction)
    = send(con-cq,inc-q,IT:Interaction) [label add-q-linking-inc-q] .
  eq send(bt-ba,buy-apple,IT:Interaction)
    = send(con-sa,ack-apple,IT:Interaction) [label buy-apple-linking-ack-apple]
    .
  eq send(bt-bc,buy-cake,IT:Interaction)
    = send(con-sc,ack-cake,IT:Interaction) [label buy-cake-linking-ack-cake] .
  eq send(bt-change,change,IT:Interaction)
    = send(con-change,change-in,IT:Interaction) [label
    change-linking-change-in] .
  eq send(con-sa,give-apple,IT:Interaction)
    = send(slot,put-apple,IT:Interaction) [label give-apple-linking-put-apple]
    .
  eq send(con-sc,give-cake,IT:Interaction)
    = send(slot,put-cake,IT:Interaction) [label give-cake-linking-put-cake] .
  rl < O:Oid : V#0:ADD-DOLLAR | none,V#1:AttributeSet >
ack([O:Oid,add-$])
    => < O:Oid : V#0:ADD-DOLLAR | V#1:AttributeSet > [label
    ADD-DOLLAR-receivingAck-add-$] .
  rl < O:Oid : V#0:ADD-QUARTER | none,V#1:AttributeSet >
ack([O:Oid,add-q])
    => < O:Oid : V#0:ADD-QUARTER | V#1:AttributeSet > [label
    ADD-QUARTER-receivingAck-add-q] .
  rl < O:Oid : V#0:BUY-APPLE | none,V#1:AttributeSet >
ack([O:Oid,buy-apple])
    => < O:Oid : V#0:BUY-APPLE | V#1:AttributeSet > [label
    BUY-APPLE-receivingAck-buy-apple] .
  rl < O:Oid : V#0:BUY-CAKE | none,V#1:AttributeSet >
ack([O:Oid,buy-cake])
    => < O:Oid : V#0:BUY-CAKE | V#1:AttributeSet > [label
    BUY-CAKE-receivingAck-buy-cake] .
  rl < O:Oid : V#0:CHANGE | none,V#1:AttributeSet >
ack([O:Oid,change])
    => < O:Oid : V#0:CHANGE | V#1:AttributeSet > [label
    CHANGE-receivingAck-change] .
  rl < O:Oid : V#12:MAKE-CHANGE | ch@quarters : V#14:StateRequired,ch@dollars :
    V#13:StateRequired,none,V#15:AttributeSet >
ack([O:Oid,ground]:: IT:Interaction)
    => after(< O:Oid : V#12:MAKE-CHANGE | ch@dollars : V#13:StateRequired,
    ch@quarters : V#14:StateRequired,V#15:AttributeSet >)
ack(IT:Interaction) [label MAKE-CHANGE-acking-ground] .
  rl < O:Oid : V#12:SLOT | cakes : V#14:Int,apples : V#13:Int,none,
    V#15:AttributeSet >
done(O:Oid,put-apple,IT:Interaction)
    => < O:Oid : V#12:SLOT | apples : V#13:Int,cakes : V#14:Int,
    V#15:AttributeSet > [label SLOT-done-put-apple] .
  rl < O:Oid : V#12:SOLD-APPLE | sa@quarters : V#14:StateRequired,sa@dollars :
    V#13:StateRequired,none,V#15:AttributeSet >
ack([O:Oid,give-apple]:: IT:Interaction)
    => after(< O:Oid : V#12:SOLD-APPLE | sa@dollars : V#13:StateRequired,
    sa@quarters : V#14:StateRequired,V#15:AttributeSet >)
ack(IT:Interaction) [label SOLD-APPLE-acking-give-apple] .
  rl < O:Oid : V#16:SLOT | cakes : V#18:Int,apples : V#17:Int,none,
    V#19:AttributeSet >
done(O:Oid,put-cake,IT:Interaction)
    => < O:Oid : V#16:SLOT | apples : V#17:Int,cakes : V#18:Int,
    V#19:AttributeSet > [label SLOT-done-put-cake] .
  rl < O:Oid : V#20:SLOT | cakes : V#22:Int,apples : V#21:Int,none,
    V#23:AttributeSet >
send(O:Oid,put-apple,IT:Interaction)
    => < O:Oid : V#20:SLOT | apples : V#21:Int,cakes : V#22:Int,
    V#23:AttributeSet >
do(O:Oid,put-apple,IT:Interaction) [label SLOT-receivingAndDo-put-apple] .
  rl < O:Oid : V#24:SLOT | cakes : V#26:Int,apples : V#25:Int,none,
    V#27:AttributeSet >
send(O:Oid,put-cake,IT:Interaction)
    => < O:Oid : V#24:SLOT | apples : V#25:Int,cakes : V#26:Int,
    V#27:AttributeSet >
do(O:Oid,put-cake,IT:Interaction) [label SLOT-receivingAndDo-put-cake] .
  rl < O:Oid : V#2:ADD-DOLLAR | none,V#3:AttributeSet >
do(O:Oid,add-$,none)
    => < O:Oid : V#2:ADD-DOLLAR | V#3:AttributeSet >
send(O:Oid,add-$,[O:Oid,add-$]) [label ADD-DOLLAR-sending-add-$] .
  rl < O:Oid : V#2:ADD-QUARTER | none,V#3:AttributeSet >
do(O:Oid,add-q,none)
    => < O:Oid : V#2:ADD-QUARTER | V#3:AttributeSet >
send(O:Oid,add-q,[O:Oid,add-q]) [label ADD-QUARTER-sending-add-q] .
  rl < O:Oid : V#2:BUY-APPLE | none,V#3:AttributeSet >
do(O:Oid,buy-apple,none)
    => < O:Oid : V#2:BUY-APPLE | V#3:AttributeSet >
send(O:Oid,buy-apple,[O:Oid,buy-apple]) [label BUY-APPLE-sending-buy-apple] .
  rl < O:Oid : V#2:BUY-CAKE | none,V#3:AttributeSet >
do(O:Oid,buy-cake,none)
    => < O:Oid : V#2:BUY-CAKE | V#3:AttributeSet >
send(O:Oid,buy-cake,[O:Oid,buy-cake]) [label BUY-CAKE-sending-buy-cake] .
  rl < O:Oid : V#2:CHANGE | none,V#3:AttributeSet >
do(O:Oid,change,none)
    => < O:Oid : V#2:CHANGE | V#3:AttributeSet >
send(O:Oid,change,[O:Oid,change]) [label CHANGE-sending-change] .
  rl < O:Oid : V#4:COUNT-DOLLAR | dollars : V#5:Int,none,V#6:AttributeSet >
ack([O:Oid,ground]:: IT:Interaction)
    => after(< O:Oid : V#4:COUNT-DOLLAR | dollars : V#5:Int,V#6:AttributeSet >)
ack(IT:Interaction) [label COUNT-DOLLAR-acking-ground] .
  rl < O:Oid : V#4:COUNT-QUARTER | quarters : V#5:Int,none,V#6:AttributeSet >
ack([O:Oid,ground]:: IT:Interaction)
    => after(< O:Oid : V#4:COUNT-QUARTER | quarters : V#5:Int,V#6:AttributeSet
    >)
ack(IT:Interaction) [label COUNT-QUARTER-acking-ground] .
  rl < O:Oid : V#4:SOLD-CAKE | sc@dollars : V#5:StateRequired,none,
    V#6:AttributeSet >
ack([O:Oid,give-cake]:: IT:Interaction)
    => after(< O:Oid : V#4:SOLD-CAKE | sc@dollars : V#5:StateRequired,
    V#6:AttributeSet >)
ack(IT:Interaction) [label SOLD-CAKE-acking-give-cake] .
  rl do(O:Oid,put-apple,IT:Interaction)
< O:Oid : V#0:SLOT | cakes : V#1:Int,apples : N:Int,none,V#2:AttributeSet >
    => done(O:Oid,put-apple,IT:Interaction)
< O:Oid : V#0:SLOT | apples :(N:Int + 1),cakes : V#1:Int,V#2:AttributeSet > [
    label slot-put-apple] .
  rl do(O:Oid,put-cake,IT:Interaction)
< O:Oid : V#3:SLOT | apples : V#4:Int,cakes : N:Int,none,V#5:AttributeSet >
    => done(O:Oid,put-cake,IT:Interaction)
< O:Oid : V#3:SLOT | cakes :(N:Int + 1),apples : V#4:Int,V#5:AttributeSet > [
    label slot-put-cake] .
  crl < O:Oid : V#16:MAKE-CHANGE | ch@quarters : V#18:StateRequired,ch@dollars
    : V#17:StateRequired,none,V#19:AttributeSet >
send(O:Oid,change-in,IT:Interaction)
    => before(< O:Oid : V#16:MAKE-CHANGE | ch@dollars : V#17:StateRequired,
    ch@quarters : V#18:StateRequired,V#19:AttributeSet >)
send(O:Oid,ground,[O:Oid,ground]:: IT:Interaction)
    if open?(< O:Oid : V#16:MAKE-CHANGE | ch@dollars : V#17:StateRequired,
    ch@quarters : V#18:StateRequired,V#19:AttributeSet >)= true [label
    MAKE-CHANGE-sending-change-in] .
  crl < O:Oid : V#16:SOLD-APPLE | sa@quarters : V#18:StateRequired,sa@dollars :
    V#17:StateRequired,none,V#19:AttributeSet >
send(O:Oid,ack-apple,IT:Interaction)
    => before(< O:Oid : V#16:SOLD-APPLE | sa@dollars : V#17:StateRequired,
    sa@quarters : V#18:StateRequired,V#19:AttributeSet >)
send(O:Oid,give-apple,[O:Oid,give-apple]:: IT:Interaction)
    if open?(< O:Oid : V#16:SOLD-APPLE | sa@dollars : V#17:StateRequired,
    sa@quarters : V#18:StateRequired,V#19:AttributeSet >)= true [label
    SOLD-APPLE-sending-ack-apple] .
  crl < O:Oid : V#7:COUNT-DOLLAR | dollars : V#8:Int,none,V#9:AttributeSet >
send(O:Oid,inc-$,IT:Interaction)
    => before(< O:Oid : V#7:COUNT-DOLLAR | dollars : V#8:Int,V#9:AttributeSet
    >)
send(O:Oid,ground,[O:Oid,ground]:: IT:Interaction)
    if open?(< O:Oid : V#7:COUNT-DOLLAR | dollars : V#8:Int,V#9:AttributeSet
    >)= true [label COUNT-DOLLAR-sending-inc-$] .
  crl < O:Oid : V#7:COUNT-QUARTER | quarters : V#8:Int,none,V#9:AttributeSet >
send(O:Oid,inc-q,IT:Interaction)
    => before(< O:Oid : V#7:COUNT-QUARTER | quarters : V#8:Int,V#9:AttributeSet
    >)
send(O:Oid,ground,[O:Oid,ground]:: IT:Interaction)
    if open?(< O:Oid : V#7:COUNT-QUARTER | quarters : V#8:Int,V#9:AttributeSet
    >)= true [label COUNT-QUARTER-sending-inc-q] .
  crl < O:Oid : V#7:SOLD-CAKE | sc@dollars : V#8:StateRequired,none,
    V#9:AttributeSet >
send(O:Oid,ack-cake,IT:Interaction)
    => before(< O:Oid : V#7:SOLD-CAKE | sc@dollars : V#8:StateRequired,
    V#9:AttributeSet >)
send(O:Oid,give-cake,[O:Oid,give-cake]:: IT:Interaction)
    if open?(< O:Oid : V#7:SOLD-CAKE | sc@dollars : V#8:StateRequired,
    V#9:AttributeSet >)= true [label SOLD-CAKE-sending-ack-cake] .
endm
