(
module BUY-APPLE {
 out port oneway buy-a ;
}
)

(
module BUY-CAKE {
 out port oneway buy-c ;
}
)

(
module ADD-DOLLAR {
 out port oneway add-$ ;
}
)

(
module ADD-QUARTER {
 out port oneway add-q ;
}
)

(
module SLOT {
 var int apples ;
 var int cakes ;
 in port oneway put-a ;
 in port oneway put-c ;
}
)

(
connector COUNT-DOLLAR {
 var int dollars = int(0) ;
 in port oneway inc-$ ;

 interaction {
  inc-$ > 
  guard( TRUE ) {
   before { 
    dollars = dollars + int(1) ;
   }
  } > ground ;
 }
}
)

(
connector COUNT-QUARTER {
 var int quarters = int(0) ;
 in port oneway inc-q ;
 out port oneway change ;

 interaction {
  inc-q > 
  guard( quarters == int(3) ) {
   alternative ( ground ) ; 
   before { 
    quarters = quarters + int(1) ;
    if ( quarters == int(4) ) { quarters = quarters - int(4) ; } 
   }
  } > change ;
 }
}
)


(
connector SOLD-APPLE {
 staterequired int sa@dollars ;
 in port oneway ack-a ;
 out port oneway give-a ;

 interaction {
  ack-a > 
  guard( sa@dollars > int(0) ) {
   before { 
    sa@dollars = sa@dollars - int(1) ;
   }
  } > give-a ;
 }
}
)

(
connector SOLD-CAKE {
 staterequired int sc@dollars ;
 in port oneway ack-c ;
 out port oneway give-c ;

 interaction {
  ack-c > 
  guard( sc@dollars > int(0) ) {
   before { 
    sc@dollars = sc@dollars - int(1) ;
   }
  } > give-c ;
 }
}
)


(
connector SPLIT { 
  in port oneway give-a-in ;
  out port oneway give-a-out ;
  out port oneway return-q ;

  interaction {
   give-a-in > give-a-out | return-q ;
  }
}
)


(
application VM {
 instantiate BUY-APPLE as ba ;
 instantiate BUY-CAKE as bc ;
 instantiate ADD-DOLLAR as ad ;
 instantiate ADD-QUARTER as aq ;
 instantiate SOLD-CAKE as sc ;
 instantiate SOLD-APPLE as sa ;
 instantiate COUNT-DOLLAR as cd ;
 instantiate COUNT-QUARTER as cq ;
 instantiate SLOT as slot ;
 instantiate SPLIT as split ;

 link ba.buy-a to sa.ack-a ;
 link bc.buy-c to sc.ack-c ;

 link aq.add-q to cq.inc-q ;
 link ad.add-$ to cd.inc-$ ;
 link cq.change to cd.inc-$ ;

 link sa.give-a to split.give-a-in ;
 link split.give-a-out to slot.put-a ;
 link split.return-q to cq.inc-q ;
 link sc.give-c to slot.put-c ;

 bind int sa.sa@dollars to cd.dollars ;
 bind int sc.sc@dollars to cd.dollars ;
}
)
