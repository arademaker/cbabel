(
module BUY-APPLE {
 out port oneway buy-a ;
}
)

(
module BUY-CAKE {
 out port oneway buy-c ;
}
)

(
module ADD-DOLLAR {
 out port oneway add-$ ;
}
)

(
module CHANGE {
 out port oneway make ;
}
)


(
module ADD-QUARTER {
 out port oneway add-q ;
}
)

(
module SLOT {
 var int slot@apples ;
 var int slot@cakes ;

 in port oneway put-a ;
 in port oneway put-c ;
}
)

(
connector COUNT-DOLLAR {
 var int dollars = int(0) ;
 in port oneway count-$ ;

 interaction {
  count-$ > 
  guard( TRUE ) {
   before { 
    dollars = dollars + int(1) ;
   }
  } > ground ;
 }
}
)

(
connector COUNT-QUARTER {
 var int quarters = int(0) ;
 in port oneway count-q ;

 interaction {
  count-q > 
  guard( TRUE ) {
   before { 
    quarters = quarters + int(1) ;
   }
  } > ground ;
 }
}
)

(
connector MAKE-CHANGE {
 staterequired int mk@dollars ;
 staterequired int mk@quarters ;
 in port oneway change ;

 interaction {
  change > 
  guard( mk@quarters == int(4) ) {
   before { 
    mk@quarters = int(0) ;
    mk@dollars = mk@dollars + int(1) ;
   }
  } > ground ;
 }
}
)

(
connector SOLD-APPLE {
 staterequired int sa@dollars ;
 staterequired int sa@quarters ;
 in port oneway ack-a ;
 out port oneway give-a ;

 interaction {
  ack-a > 
  guard( sa@dollars > int(0) ) {
   before { 
    sa@dollars = sa@dollars - int(1) ;
    sa@quarters = sa@quarters + int(1) ;    
   }
  } > give-a ;
 }
}
)

(
connector SOLD-CAKE {
 staterequired int sc@dollars ;
 in port oneway ack-c ;
 out port oneway give-c ;

 interaction {
  ack-c > 
  guard( sc@dollars > int(0) ) {
   before { 
    sc@dollars = sc@dollars - int(1) ;
   }
  } > give-c ;
 }
}
)

(
application VM {
 instantiate BUY-APPLE as ba ;
 instantiate BUY-CAKE as bc ;
 instantiate ADD-DOLLAR as ad ;
 instantiate ADD-QUARTER as aq ;
 instantiate CHANGE as change ;
 instantiate SLOT as slot ;
 instantiate SOLD-CAKE as sc ;
 instantiate SOLD-APPLE as sa ;
 instantiate COUNT-DOLLAR as cd ;
 instantiate COUNT-QUARTER as cq ;
 instantiate MAKE-CHANGE as mc ;

 link ba.buy-a to sa.ack-a ;
 link bc.buy-c to sc.ack-c ;
 link sa.give-a to slot.put-a ;
 link sc.give-c to slot.put-c ;

 link aq.add-q to cq.count-q ;
 link ad.add-$ to cd.count-$ ;
 link change.make to mc.change ;

 bind int sa.sa@dollars to cd.dollars ;
 bind int sc.sc@dollars to cd.dollars ;
 bind int mc.mk@dollars to cd.dollars ;
 bind int sa.sa@quarters to cq.quarters ;
 bind int mc.mk@quarters to cq.quarters ;
}
)
